// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace UsingSpecflowForUnitTests.SecureNavigation
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Secure navigation rendering")]
    public partial class SecureNavigationRenderingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Secure Navigation Rendering.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Secure navigation rendering", "\r\nIn order to prevent a user from accessing a feature they are not meant to acces" +
                    "s\r\nThe system will need to restrict features the user is able to navigate to", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Module",
                        "DisplayName",
                        "GroupName",
                        "Section"});
            table1.AddRow(new string[] {
                        "AccessFeature1",
                        "FrontDesk",
                        "Feature 1",
                        "Front Desk Apps",
                        "Application"});
            table1.AddRow(new string[] {
                        "AccessFeature2",
                        "FrontDesk",
                        "Feature 2",
                        "Owner Apps",
                        "Application"});
            table1.AddRow(new string[] {
                        "AccessFeature3",
                        "FrontDesk",
                        "Feature 3",
                        "Customer Apps",
                        "Application"});
            table1.AddRow(new string[] {
                        "ViewReport1",
                        "FrontDesk",
                        "Report 1",
                        "Front Desk Reports",
                        "Reports"});
            table1.AddRow(new string[] {
                        "AccessFeature4",
                        "FrontDesk",
                        "Feature 4",
                        "Front Desk Apps",
                        "Application"});
            table1.AddRow(new string[] {
                        "ViewReport2",
                        "FrontDesk",
                        "Report 2",
                        "Front Desk Reports",
                        "Reports"});
            table1.AddRow(new string[] {
                        "ViewReport3",
                        "Sales",
                        "Report 3",
                        "Sales Reports",
                        "Reports"});
            table1.AddRow(new string[] {
                        "AccessUtility1",
                        "Sales",
                        "Utility 1",
                        "Sales Utils",
                        "Utilities"});
            table1.AddRow(new string[] {
                        "AccessFeature5",
                        "Hoa",
                        "Feature 5",
                        "HOA Apps",
                        "Application"});
            table1.AddRow(new string[] {
                        "AccessUtility2",
                        "Hoa",
                        "Utility 2",
                        "HOA Utils",
                        "Utilities"});
            table1.AddRow(new string[] {
                        "ViewReport4",
                        "Hoa",
                        "Report 4",
                        "HOA Reports",
                        "Reports"});
#line 8
 testRunner.Given("a feature-to-privilege mapping of:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Url"});
            table2.AddRow(new string[] {
                        "Eticket1",
                        "http://www.url1.com"});
            table2.AddRow(new string[] {
                        "Eticket2",
                        "http://www.url2.com"});
            table2.AddRow(new string[] {
                        "Eticket3",
                        "http://www.url3.com"});
            table2.AddRow(new string[] {
                        "Eticket4",
                        "http://www.url4.com"});
            table2.AddRow(new string[] {
                        "Eticket5",
                        "http://www.url5.com"});
            table2.AddRow(new string[] {
                        "Eticket6",
                        "http://www.url6.com"});
            table2.AddRow(new string[] {
                        "Eticket7",
                        "http://www.url7.com"});
#line 22
 testRunner.Given("a set of ETickets of:", ((string)(null)), table2);
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No access to features")]
        public virtual void NoAccessToFeatures()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No access to features", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission"});
#line 36
 testRunner.Given("the privileges of the user accessing the system is:", ((string)(null)), table3);
#line 38
 testRunner.When("requesting the FrontDesk hyperlinks the current user can access");
#line hidden
#line 39
 testRunner.Then("the following hyperlinks should be available:", "ApplicationSection\r\n\tE-tickets\r\n\t\tEticket1\r\n\t\tEticket2\r\n\t\tEticket3\r\n\t\tEticket4\r\n\t" +
                    "\tEticket5\r\n\t\tEticket6\r\n\t\tEticket7", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partial access to Front Desk features")]
        public virtual void PartialAccessToFrontDeskFeatures()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial access to Front Desk features", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission"});
            table4.AddRow(new string[] {
                        "AccessFeature4"});
            table4.AddRow(new string[] {
                        "AccessFeature1"});
            table4.AddRow(new string[] {
                        "AccessFeature2"});
            table4.AddRow(new string[] {
                        "AccessFeature3"});
            table4.AddRow(new string[] {
                        "ViewReport2"});
            table4.AddRow(new string[] {
                        "ViewReport3"});
            table4.AddRow(new string[] {
                        "AccessUtility1"});
#line 56
 testRunner.Given("the privileges of the user accessing the system is:", ((string)(null)), table4);
#line 65
 testRunner.When("requesting the FrontDesk hyperlinks the current user can access");
#line hidden
#line 66
 testRunner.Then("the following hyperlinks should be available:", @"ApplicationSection
	Customer Apps
		Feature 3
	Front Desk Apps
		Feature 1
		Feature 4
	Owner Apps
		Feature 2
	E-tickets
		Eticket1
		Eticket2
		Eticket3
		Eticket4
		Eticket5
		Eticket6
		Eticket7
ReportsSection
	Front Desk Reports
		Report 2", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Full access to Hoa features")]
        public virtual void FullAccessToHoaFeatures()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Full access to Hoa features", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission"});
            table5.AddRow(new string[] {
                        "AccessFeature4"});
            table5.AddRow(new string[] {
                        "AccessFeature1"});
            table5.AddRow(new string[] {
                        "AccessFeature2"});
            table5.AddRow(new string[] {
                        "AccessFeature3"});
            table5.AddRow(new string[] {
                        "ViewReport2"});
            table5.AddRow(new string[] {
                        "ViewReport3"});
            table5.AddRow(new string[] {
                        "AccessUtility1"});
            table5.AddRow(new string[] {
                        "AccessFeature5"});
            table5.AddRow(new string[] {
                        "AccessUtility2"});
            table5.AddRow(new string[] {
                        "ViewReport4"});
#line 93
 testRunner.Given("the privileges of the user accessing the system is:", ((string)(null)), table5);
#line 105
 testRunner.When("requesting the Hoa hyperlinks the current user can access");
#line hidden
#line 106
 testRunner.Then("the following hyperlinks should be available:", "ApplicationSection\r\n\tHOA Apps\r\n\t\tFeature 5\r\nUtilitiesSection\r\n\tHOA Utils\r\n\t\tUtili" +
                    "ty 2\r\nReportsSection\r\n\tHOA Reports\r\n\t\tReport 4", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
